# Episode 1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-episode1
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-episode1
  template:
    metadata:
      labels:
        app: mongo-episode1
    spec:
      containers:
      - name: mongo
        image: mongo:latest
        volumeMounts:
        - name: mongo-storage
          mountPath: /data/db
      volumes:
      - name: mongo-storage
        persistentVolumeClaim:
          claimName: mongo-pvc-episode1

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc-episode1
  namespace: production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-episode1
  namespace: production
spec:
  selector:
    app: mongo-episode1
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---

apiVersion: v1
kind: Service
metadata:
  name: episode1-backend
  namespace: production
spec:
  selector:
    app: episode1
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: episode1
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: episode1
  template:
    metadata:
      labels:
        app: episode1 
    spec:
      containers:
      - name: backend
        image: mahad002/scd-03:episode1-backend
        ports:
        - containerPort: 8000
        env:
        - name: MONGO_DB_SECRET
          value: "mongodb://mongo-episode1:27017/episode1"
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8000"
        readinessProbe:
          httpGet:
            path: /api/status
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: frontend
        image: mahad002/scd-03:episode1-frontend
        ports:
        - containerPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: episode1-frontend
  namespace: production
spec:
  selector:
    app: episode1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: episode1-ingress
  namespace: production
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/custom-http-errors: '404'
    nginx.ingress.kubernetes.io/default-backend: episode1-frontend
spec:
  rules:
  - host: "ep1.example.local"
    http:
      paths:
      - pathType: ImplementationSpecific
        path: "/(?!api/)(.*)"
        backend:
          service:
            name: episode1-frontend
            port:
              number: 80
      - pathType: ImplementationSpecific
        path: "/api/(.*)"
        backend:
          service:
            name: episode1-backend
            port:
              number: 8000